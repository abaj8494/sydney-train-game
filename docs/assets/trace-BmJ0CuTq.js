function m(t,e){if(!Number.isFinite(t)||!Number.isFinite(e)||Math.abs(e)>9||t<0&&Math.trunc(e)!==e)return null;const i=t**e;return Number.isFinite(i)&&Math.abs(i)<=1e9?i:null}function p(t,e,i){const o=[],l=(n,c,r=n)=>o.push({op:n,node:{val:c,expr:`(${t.expr}${r}${e.expr})`}});if(i.has("+")&&l("+",t.val+e.val),i.has("-")&&l("-",t.val-e.val),i.has("*")&&l("*",t.val*e.val),i.has("/")&&Math.abs(e.val)>1e-9&&l("/",t.val/e.val),i.has("^")){const n=m(t.val,e.val);n!==null&&l("^",n,"^")}return o}function x(t,e,i=10){const o=new Set(e);function l(n){const c={state:n.map(r=>r.expr),children:[]};if(n.length===1)return c.isSolution=Math.abs(n[0].val-i)<1e-9,c;for(let r=0;r<n.length-1;r++){const f=n[r],h=n[r+1];for(const{node:a,op:v}of p(f,h,o)){const $=n.slice(0,r).concat(a,n.slice(r+2)),u=l($);u.action={i:r,op:v,out:a.expr,val:a.val},c.children.push(u)}}return c}return l(t.map(n=>({val:n,expr:String(n)})))}function S(t,e=!1,i=""){const o=`${i}[${t.state.join(", ")}]${t.isSolution?" âœ…":""}`;console.log(o);for(const l of t.children){if(e&&!s(l))continue;const n=l.action;console.log(`${i}  merge(${n.i},${n.i+1}) op ${n.op} -> ${n.out} = ${g(n.val)}`),S(l,e,i+"    ")}}function s(t){return t.isSolution?!0:t.children.some(s)}const g=t=>Number.isInteger(t)?String(t):t.toFixed(6);export{S as printTrace,x as traceSolve};
